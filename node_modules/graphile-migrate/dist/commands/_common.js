"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const JSON5 = require("json5");
const pg_connection_string_1 = require("pg-connection-string");
exports.GMRC_PATH = `${process.cwd()}/.gmrc`;
exports.GMRCJS_PATH = `${exports.GMRC_PATH}.js`;
async function exists(path) {
    try {
        await fs_1.promises.access(path, fs_1.constants.F_OK /* visible to us */);
        return true;
    }
    catch (e) {
        return false;
    }
}
exports.exists = exists;
async function getSettingsFromJSON(path) {
    let data;
    try {
        data = await fs_1.promises.readFile(path, "utf8");
    }
    catch (e) {
        throw new Error(`Failed to read '${path}': ${e.message}`);
    }
    try {
        return JSON5.parse(data);
    }
    catch (e) {
        throw new Error(`Failed to parse '${path}': ${e.message}`);
    }
}
exports.getSettingsFromJSON = getSettingsFromJSON;
async function getSettings() {
    if (await exists(exports.GMRC_PATH)) {
        return getSettingsFromJSON(exports.GMRC_PATH);
    }
    else if (await exists(exports.GMRCJS_PATH)) {
        try {
            return require(exports.GMRCJS_PATH);
        }
        catch (e) {
            throw new Error(`Failed to import '${exports.GMRCJS_PATH}'; error:\n    ${e.stack.replace(/\n/g, "\n    ")}`);
        }
    }
    else {
        throw new Error("No .gmrc file found; please run `graphile-migrate init` first.");
    }
}
exports.getSettings = getSettings;
function readStdin() {
    return new Promise((resolve, reject) => {
        let data = "";
        process.stdin.setEncoding("utf8");
        process.stdin.on("error", reject);
        process.stdin.on("readable", () => {
            let chunk;
            // Use a loop to make sure we read all available data.
            while ((chunk = process.stdin.read()) !== null) {
                data += chunk;
            }
        });
        process.stdin.on("end", () => {
            resolve(data);
        });
    });
}
exports.readStdin = readStdin;
function getDatabaseName(connectionString) {
    const databaseName = pg_connection_string_1.parse(connectionString).database;
    if (!databaseName) {
        throw new Error("Could not determine database name from connection string.");
    }
    return databaseName;
}
exports.getDatabaseName = getDatabaseName;
//# sourceMappingURL=_common.js.map